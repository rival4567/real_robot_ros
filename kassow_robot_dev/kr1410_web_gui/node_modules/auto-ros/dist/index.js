"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _os = require("os");
var _eventemitter = require("eventemitter2");
var _roslib = _interopRequireDefault(require("roslib"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
// Private variables
var host = (0, _os.hostname)() || 'localhost';
var defaultUrl = "ws://".concat(host, ":9090");

// reconnect timeout in ms
var RECONNECT_TIMEOUT = 5000;
var AutoRos = /*#__PURE__*/function (_EventEmitter) {
  _inherits(AutoRos, _EventEmitter);
  var _super = _createSuper(AutoRos);
  /**
   * Auto reconnecting wrapper of ROSLIB.Ros
   *
   * @param {Object} [options]
   * @param {number} [options.reconnectTimeOut=5000] - The reconnect timeout in ms.
   * @param {Object} [options.rosOptions] - Option object passed to the constructor of the ROSLIB.Ros object.
   * @param {string} [options.rosOptions.encoding=ascii] - Overruling the default of ROSLIB, which is 'utf8'.
   */
  function AutoRos(options) {
    var _this;
    _classCallCheck(this, AutoRos);
    _this = _super.call(this);
    options = options || {};
    _this._reconnectTimeOut = options.reconnectTimeOut || RECONNECT_TIMEOUT;
    var rosOptions = options.rosOptions || {};
    rosOptions.encoding = rosOptions.encoding || 'ascii';
    if ('url' in rosOptions) {
      throw '"url" option to ROS is not allowed. Connect by calling the connect function on this object with the "url" as argument';
    }
    console.debug('Creating ROS with the options:', rosOptions);
    _this.ros = new _roslib["default"].Ros(rosOptions);
    _this._status = 'closed';
    _this.ros.on('connection', _this.onConnection.bind(_assertThisInitialized(_this)));
    _this.ros.on('close', _this.onClose.bind(_assertThisInitialized(_this)));
    _this.ros.on('error', _this.onError.bind(_assertThisInitialized(_this)));
    return _this;
  }

  /**
   * Status getter
   */
  _createClass(AutoRos, [{
    key: "status",
    get: function get() {
      return this._status;
    }

    /**
     * Status setter
     * @param {string} value - Value to be set
     */,
    set: function set(value) {
      this._status = value;
      this.emit('status', value);
    }

    /**
     * Connect to rosbridge
     *
     * If an url is provided, it will connect to that one. Else it will
     * use the previous url. Uses a url based on the hostname if no urls
     * are provided.
     */
  }, {
    key: "connect",
    value: function connect(url) {
      this.url = url || this.url || defaultUrl;
      console.log("connecting to ".concat(this.url));
      this.ros.connect(this.url);
      this.status = 'connecting';
    }

    // ros status event handling
    /**
     * Event Callback on 'connection'
     */
  }, {
    key: "onConnection",
    value: function onConnection() {
      console.log('connection');
      this.status = 'connected';
    }

    /**
     * Event Callback on 'close'
     */
  }, {
    key: "onClose",
    value: function onClose() {
      setTimeout(this.connect.bind(this), this._reconnectTimeOut);
      console.log('connection closed');
      this.status = 'closed';
    }

    /**
     * Event Callback on 'error'
     */
  }, {
    key: "onError",
    value: function onError() {
      // console.log('connection error')
      this.status = 'error';
    }
  }]);
  return AutoRos;
}(_eventemitter.EventEmitter2);
var _default = AutoRos;
exports["default"] = _default;